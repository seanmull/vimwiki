# Proposal for OCD chatterbox

## Context:
OCD is a management system for support the download of music list for the HDMS.  Currently it handles the following tasks:

1. Accesses the contact server.
2. Updates the state of the systems.
3. Finds the systems that need a database update.
4. Creates and schedules jobs across OCD.
5. Exposes an API to update Enterprise X.
6. Manages events for all listeners.
7. Stores status of system if it is online or not.
8. Defines and stores tasks.
9. Tasks are managed via a trickle feed model where each task is run under a set interval.
10. Identify all systems that need updates.
11. Determines which song/lists are valid songs to download.
12. Determines which songs should be culled.
13. And much more..

OCD chatterbox is the first step in separating the some of the responsibility from OCD.  This would more closely adhere to a micro-service model, which is more maintainable and scaleable. 

## What does the jobStatus do?
Monitoring job status is responsible for maintaining the status of all the jobs that it is currently modelling.

In summary it does the following:  
* Looks for any jobs that are currently not being monitored by OCD.
    - Method:  updateDatabase()
* Updates the jobs that are monitored by OCD.
    - Method:  getAllJobsStatus()
    - Note: Both are accomplished by utilizing:
        - RPC requests to nl-hdms
        - Connecting to biggie-small and performing SQL queries.
- Find jobs that have errors and deletes them after a day or two.
- It runs these tasks in a timed loop but has the ability to add time when the traffic is higher then expected

## Requirements
* A new backend will be deployed on the production cluster.
* Any shared libraries will be moved to a more suitable location in mono.
* All shared state will be stored in a Redis cache
* Metrics will be collected for the following parameters utilizing Prometheus:
    - Downloads
    - Total jobs
    - Active jobs
    - Total OCD jobs
    - Active OCD jobs
    - How long it takes to gather jobs for every system
    - How many systems are gathered per run

## Architectural Diagram

```mermaid
flowchart LR
    C --->|read Jobs Status| A(nl-OCD)
    B(nl-OCD_chatterbox) --->|writes Job status| C[(redis)]
    A ---> |imports|D(shared_libraries)
    B ---> |imports|D(shared_libraries)
```


## Extract Libraries List

Libraries that need to be shared
```typescript
import { Task } from '../tasks/task'
```
## Files that would compose OCD chatterbox

1. Jobstatus.ts - Main file that gathers all the system job status.
2. JobAPI.ts - Only used to expose an endpoint 
3. ActiveJobs.ts - Helper object that defines parameters of an active job.

## What OCD_chatterbox needs from OCD?

* ErrorsController
    - Store instance so we can access sync and create error methods. 
* OnlineSystemsController
    - Store instance so we can check if system is online and if system is synced.
* InternalSystemsController
    - Remove system when we have a DNS failure.

### Data format

#### ErrorsController

onlineSystems
```typescript
    // Method called
    let onlineSystems: Array<string> =  
        ErrorsController.instance.cleanupSyncingSystems(this.currentIteration)
    // Reference definition
    cleanupSyncingSystems(currentIteration: number): Array<string> 
```
ErrorsController Instance
```typescript
    // Method called
    ErrorsController.instance.syncingSystem(allSystems[index].system_id,
        this.currentIteration)
    // Reference definition
    syncingSystem(system_id: any, currentIteration: number) 
```

```typescript
    // Method called
    ErrorsController.instance.createError({system:entry.system_id, 
                                           description:`Aria Job Failed: 
                                          ${entry.job_id}`})
    // Reference defintion
    createError(data: ErrorData) 
    // Interface defintion
    interface ErrorData {
        system: string
        description: string
}
```

#### OnlineSystemsController
```typescript
    // Method called
    if (!OnlineSystemsController.instance.isSystemOnline(row.system_id))
    // Reference definition
    isSystemOnline(system: string) 
```
```typescript
    // Method called
    OnlineSystemsController.instance.checkSyncingStatus(element[1].value()[0][0])
    // Reference definition
    checkSyncingStatus(data: {system_id: string, date: Date, state: string}) 
```

#### InternalSystemsController
```typescript
    // Method called
    InternalSystemsController.instance.removeSystem(system_id)
    // Reference definition
    public removeSystem(systemID: string)
```

## What OCD needs from OCD_chatterbox?
TODO look into the tricklefeed

## What data needs to be stored in redis?

TODO figure out what OCD actually needs from this
```typescript
interface JobData {
    id: number
    job_id: number
    system: string
    server: string
    state: string
    total_files: number
    details: any
}
```

## What needs to be monitored via Prometheus?

```typescript
class Results {
    private totalJobs: number = -1
    private activeJobs: number = -1
    private totalOCDJobs: number = -1
    private activeOCDJobs: number = -1
```
